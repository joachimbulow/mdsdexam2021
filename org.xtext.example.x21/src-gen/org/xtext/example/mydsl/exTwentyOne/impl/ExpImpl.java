/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.exTwentyOne.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.exTwentyOne.ExTwentyOnePackage;
import org.xtext.example.mydsl.exTwentyOne.Exp;
import org.xtext.example.mydsl.exTwentyOne.LogicExp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getRightPlus <em>Right Plus</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getRightMinus <em>Right Minus</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getRightMultiply <em>Right Multiply</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getRightDivide <em>Right Divide</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getInParenthesis <em>In Parenthesis</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getLetId <em>Let Id</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getLetDefExp <em>Let Def Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getLetTargetExp <em>Let Target Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getIfLogicExp <em>If Logic Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getThenExp <em>Then Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getElseExp <em>Else Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getNewArrayId <em>New Array Id</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getNewArrayIds <em>New Array Ids</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.ExpImpl#getNewArrayExps <em>New Array Exps</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpImpl extends MinimalEObjectImpl.Container implements Exp
{
  /**
   * The default value of the '{@link #getLeft() <em>Left</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected static final String LEFT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected String left = LEFT_EDEFAULT;

  /**
   * The cached value of the '{@link #getRightPlus() <em>Right Plus</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightPlus()
   * @generated
   * @ordered
   */
  protected Exp rightPlus;

  /**
   * The cached value of the '{@link #getRightMinus() <em>Right Minus</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightMinus()
   * @generated
   * @ordered
   */
  protected Exp rightMinus;

  /**
   * The cached value of the '{@link #getRightMultiply() <em>Right Multiply</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightMultiply()
   * @generated
   * @ordered
   */
  protected Exp rightMultiply;

  /**
   * The cached value of the '{@link #getRightDivide() <em>Right Divide</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightDivide()
   * @generated
   * @ordered
   */
  protected Exp rightDivide;

  /**
   * The cached value of the '{@link #getInParenthesis() <em>In Parenthesis</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInParenthesis()
   * @generated
   * @ordered
   */
  protected Exp inParenthesis;

  /**
   * The default value of the '{@link #getLetId() <em>Let Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetId()
   * @generated
   * @ordered
   */
  protected static final String LET_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLetId() <em>Let Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetId()
   * @generated
   * @ordered
   */
  protected String letId = LET_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getLetDefExp() <em>Let Def Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetDefExp()
   * @generated
   * @ordered
   */
  protected Exp letDefExp;

  /**
   * The cached value of the '{@link #getLetTargetExp() <em>Let Target Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetTargetExp()
   * @generated
   * @ordered
   */
  protected Exp letTargetExp;

  /**
   * The cached value of the '{@link #getIfLogicExp() <em>If Logic Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfLogicExp()
   * @generated
   * @ordered
   */
  protected LogicExp ifLogicExp;

  /**
   * The cached value of the '{@link #getThenExp() <em>Then Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenExp()
   * @generated
   * @ordered
   */
  protected Exp thenExp;

  /**
   * The cached value of the '{@link #getElseExp() <em>Else Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseExp()
   * @generated
   * @ordered
   */
  protected Exp elseExp;

  /**
   * The default value of the '{@link #getNewArrayId() <em>New Array Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNewArrayId()
   * @generated
   * @ordered
   */
  protected static final String NEW_ARRAY_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNewArrayId() <em>New Array Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNewArrayId()
   * @generated
   * @ordered
   */
  protected String newArrayId = NEW_ARRAY_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getNewArrayIds() <em>New Array Ids</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNewArrayIds()
   * @generated
   * @ordered
   */
  protected EList<String> newArrayIds;

  /**
   * The cached value of the '{@link #getNewArrayExps() <em>New Array Exps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNewArrayExps()
   * @generated
   * @ordered
   */
  protected EList<Exp> newArrayExps;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExTwentyOnePackage.Literals.EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(String newLeft)
  {
    String oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LEFT, oldLeft, left));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getRightPlus()
  {
    return rightPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightPlus(Exp newRightPlus, NotificationChain msgs)
  {
    Exp oldRightPlus = rightPlus;
    rightPlus = newRightPlus;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_PLUS, oldRightPlus, newRightPlus);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightPlus(Exp newRightPlus)
  {
    if (newRightPlus != rightPlus)
    {
      NotificationChain msgs = null;
      if (rightPlus != null)
        msgs = ((InternalEObject)rightPlus).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_PLUS, null, msgs);
      if (newRightPlus != null)
        msgs = ((InternalEObject)newRightPlus).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_PLUS, null, msgs);
      msgs = basicSetRightPlus(newRightPlus, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_PLUS, newRightPlus, newRightPlus));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getRightMinus()
  {
    return rightMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightMinus(Exp newRightMinus, NotificationChain msgs)
  {
    Exp oldRightMinus = rightMinus;
    rightMinus = newRightMinus;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_MINUS, oldRightMinus, newRightMinus);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightMinus(Exp newRightMinus)
  {
    if (newRightMinus != rightMinus)
    {
      NotificationChain msgs = null;
      if (rightMinus != null)
        msgs = ((InternalEObject)rightMinus).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_MINUS, null, msgs);
      if (newRightMinus != null)
        msgs = ((InternalEObject)newRightMinus).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_MINUS, null, msgs);
      msgs = basicSetRightMinus(newRightMinus, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_MINUS, newRightMinus, newRightMinus));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getRightMultiply()
  {
    return rightMultiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightMultiply(Exp newRightMultiply, NotificationChain msgs)
  {
    Exp oldRightMultiply = rightMultiply;
    rightMultiply = newRightMultiply;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_MULTIPLY, oldRightMultiply, newRightMultiply);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightMultiply(Exp newRightMultiply)
  {
    if (newRightMultiply != rightMultiply)
    {
      NotificationChain msgs = null;
      if (rightMultiply != null)
        msgs = ((InternalEObject)rightMultiply).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_MULTIPLY, null, msgs);
      if (newRightMultiply != null)
        msgs = ((InternalEObject)newRightMultiply).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_MULTIPLY, null, msgs);
      msgs = basicSetRightMultiply(newRightMultiply, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_MULTIPLY, newRightMultiply, newRightMultiply));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getRightDivide()
  {
    return rightDivide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightDivide(Exp newRightDivide, NotificationChain msgs)
  {
    Exp oldRightDivide = rightDivide;
    rightDivide = newRightDivide;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_DIVIDE, oldRightDivide, newRightDivide);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightDivide(Exp newRightDivide)
  {
    if (newRightDivide != rightDivide)
    {
      NotificationChain msgs = null;
      if (rightDivide != null)
        msgs = ((InternalEObject)rightDivide).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_DIVIDE, null, msgs);
      if (newRightDivide != null)
        msgs = ((InternalEObject)newRightDivide).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__RIGHT_DIVIDE, null, msgs);
      msgs = basicSetRightDivide(newRightDivide, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__RIGHT_DIVIDE, newRightDivide, newRightDivide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getInParenthesis()
  {
    return inParenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInParenthesis(Exp newInParenthesis, NotificationChain msgs)
  {
    Exp oldInParenthesis = inParenthesis;
    inParenthesis = newInParenthesis;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__IN_PARENTHESIS, oldInParenthesis, newInParenthesis);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInParenthesis(Exp newInParenthesis)
  {
    if (newInParenthesis != inParenthesis)
    {
      NotificationChain msgs = null;
      if (inParenthesis != null)
        msgs = ((InternalEObject)inParenthesis).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__IN_PARENTHESIS, null, msgs);
      if (newInParenthesis != null)
        msgs = ((InternalEObject)newInParenthesis).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__IN_PARENTHESIS, null, msgs);
      msgs = basicSetInParenthesis(newInParenthesis, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__IN_PARENTHESIS, newInParenthesis, newInParenthesis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLetId()
  {
    return letId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLetId(String newLetId)
  {
    String oldLetId = letId;
    letId = newLetId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LET_ID, oldLetId, letId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getLetDefExp()
  {
    return letDefExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLetDefExp(Exp newLetDefExp, NotificationChain msgs)
  {
    Exp oldLetDefExp = letDefExp;
    letDefExp = newLetDefExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LET_DEF_EXP, oldLetDefExp, newLetDefExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLetDefExp(Exp newLetDefExp)
  {
    if (newLetDefExp != letDefExp)
    {
      NotificationChain msgs = null;
      if (letDefExp != null)
        msgs = ((InternalEObject)letDefExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__LET_DEF_EXP, null, msgs);
      if (newLetDefExp != null)
        msgs = ((InternalEObject)newLetDefExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__LET_DEF_EXP, null, msgs);
      msgs = basicSetLetDefExp(newLetDefExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LET_DEF_EXP, newLetDefExp, newLetDefExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getLetTargetExp()
  {
    return letTargetExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLetTargetExp(Exp newLetTargetExp, NotificationChain msgs)
  {
    Exp oldLetTargetExp = letTargetExp;
    letTargetExp = newLetTargetExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LET_TARGET_EXP, oldLetTargetExp, newLetTargetExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLetTargetExp(Exp newLetTargetExp)
  {
    if (newLetTargetExp != letTargetExp)
    {
      NotificationChain msgs = null;
      if (letTargetExp != null)
        msgs = ((InternalEObject)letTargetExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__LET_TARGET_EXP, null, msgs);
      if (newLetTargetExp != null)
        msgs = ((InternalEObject)newLetTargetExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__LET_TARGET_EXP, null, msgs);
      msgs = basicSetLetTargetExp(newLetTargetExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__LET_TARGET_EXP, newLetTargetExp, newLetTargetExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExp getIfLogicExp()
  {
    return ifLogicExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfLogicExp(LogicExp newIfLogicExp, NotificationChain msgs)
  {
    LogicExp oldIfLogicExp = ifLogicExp;
    ifLogicExp = newIfLogicExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__IF_LOGIC_EXP, oldIfLogicExp, newIfLogicExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfLogicExp(LogicExp newIfLogicExp)
  {
    if (newIfLogicExp != ifLogicExp)
    {
      NotificationChain msgs = null;
      if (ifLogicExp != null)
        msgs = ((InternalEObject)ifLogicExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__IF_LOGIC_EXP, null, msgs);
      if (newIfLogicExp != null)
        msgs = ((InternalEObject)newIfLogicExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__IF_LOGIC_EXP, null, msgs);
      msgs = basicSetIfLogicExp(newIfLogicExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__IF_LOGIC_EXP, newIfLogicExp, newIfLogicExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getThenExp()
  {
    return thenExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenExp(Exp newThenExp, NotificationChain msgs)
  {
    Exp oldThenExp = thenExp;
    thenExp = newThenExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__THEN_EXP, oldThenExp, newThenExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThenExp(Exp newThenExp)
  {
    if (newThenExp != thenExp)
    {
      NotificationChain msgs = null;
      if (thenExp != null)
        msgs = ((InternalEObject)thenExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__THEN_EXP, null, msgs);
      if (newThenExp != null)
        msgs = ((InternalEObject)newThenExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__THEN_EXP, null, msgs);
      msgs = basicSetThenExp(newThenExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__THEN_EXP, newThenExp, newThenExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getElseExp()
  {
    return elseExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseExp(Exp newElseExp, NotificationChain msgs)
  {
    Exp oldElseExp = elseExp;
    elseExp = newElseExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__ELSE_EXP, oldElseExp, newElseExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseExp(Exp newElseExp)
  {
    if (newElseExp != elseExp)
    {
      NotificationChain msgs = null;
      if (elseExp != null)
        msgs = ((InternalEObject)elseExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__ELSE_EXP, null, msgs);
      if (newElseExp != null)
        msgs = ((InternalEObject)newElseExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.EXP__ELSE_EXP, null, msgs);
      msgs = basicSetElseExp(newElseExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__ELSE_EXP, newElseExp, newElseExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNewArrayId()
  {
    return newArrayId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNewArrayId(String newNewArrayId)
  {
    String oldNewArrayId = newArrayId;
    newArrayId = newNewArrayId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.EXP__NEW_ARRAY_ID, oldNewArrayId, newArrayId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getNewArrayIds()
  {
    if (newArrayIds == null)
    {
      newArrayIds = new EDataTypeEList<String>(String.class, this, ExTwentyOnePackage.EXP__NEW_ARRAY_IDS);
    }
    return newArrayIds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Exp> getNewArrayExps()
  {
    if (newArrayExps == null)
    {
      newArrayExps = new EObjectContainmentEList<Exp>(Exp.class, this, ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS);
    }
    return newArrayExps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.EXP__RIGHT_PLUS:
        return basicSetRightPlus(null, msgs);
      case ExTwentyOnePackage.EXP__RIGHT_MINUS:
        return basicSetRightMinus(null, msgs);
      case ExTwentyOnePackage.EXP__RIGHT_MULTIPLY:
        return basicSetRightMultiply(null, msgs);
      case ExTwentyOnePackage.EXP__RIGHT_DIVIDE:
        return basicSetRightDivide(null, msgs);
      case ExTwentyOnePackage.EXP__IN_PARENTHESIS:
        return basicSetInParenthesis(null, msgs);
      case ExTwentyOnePackage.EXP__LET_DEF_EXP:
        return basicSetLetDefExp(null, msgs);
      case ExTwentyOnePackage.EXP__LET_TARGET_EXP:
        return basicSetLetTargetExp(null, msgs);
      case ExTwentyOnePackage.EXP__IF_LOGIC_EXP:
        return basicSetIfLogicExp(null, msgs);
      case ExTwentyOnePackage.EXP__THEN_EXP:
        return basicSetThenExp(null, msgs);
      case ExTwentyOnePackage.EXP__ELSE_EXP:
        return basicSetElseExp(null, msgs);
      case ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS:
        return ((InternalEList<?>)getNewArrayExps()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.EXP__LEFT:
        return getLeft();
      case ExTwentyOnePackage.EXP__RIGHT_PLUS:
        return getRightPlus();
      case ExTwentyOnePackage.EXP__RIGHT_MINUS:
        return getRightMinus();
      case ExTwentyOnePackage.EXP__RIGHT_MULTIPLY:
        return getRightMultiply();
      case ExTwentyOnePackage.EXP__RIGHT_DIVIDE:
        return getRightDivide();
      case ExTwentyOnePackage.EXP__IN_PARENTHESIS:
        return getInParenthesis();
      case ExTwentyOnePackage.EXP__LET_ID:
        return getLetId();
      case ExTwentyOnePackage.EXP__LET_DEF_EXP:
        return getLetDefExp();
      case ExTwentyOnePackage.EXP__LET_TARGET_EXP:
        return getLetTargetExp();
      case ExTwentyOnePackage.EXP__IF_LOGIC_EXP:
        return getIfLogicExp();
      case ExTwentyOnePackage.EXP__THEN_EXP:
        return getThenExp();
      case ExTwentyOnePackage.EXP__ELSE_EXP:
        return getElseExp();
      case ExTwentyOnePackage.EXP__NEW_ARRAY_ID:
        return getNewArrayId();
      case ExTwentyOnePackage.EXP__NEW_ARRAY_IDS:
        return getNewArrayIds();
      case ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS:
        return getNewArrayExps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.EXP__LEFT:
        setLeft((String)newValue);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_PLUS:
        setRightPlus((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_MINUS:
        setRightMinus((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_MULTIPLY:
        setRightMultiply((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_DIVIDE:
        setRightDivide((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__IN_PARENTHESIS:
        setInParenthesis((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__LET_ID:
        setLetId((String)newValue);
        return;
      case ExTwentyOnePackage.EXP__LET_DEF_EXP:
        setLetDefExp((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__LET_TARGET_EXP:
        setLetTargetExp((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__IF_LOGIC_EXP:
        setIfLogicExp((LogicExp)newValue);
        return;
      case ExTwentyOnePackage.EXP__THEN_EXP:
        setThenExp((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__ELSE_EXP:
        setElseExp((Exp)newValue);
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_ID:
        setNewArrayId((String)newValue);
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_IDS:
        getNewArrayIds().clear();
        getNewArrayIds().addAll((Collection<? extends String>)newValue);
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS:
        getNewArrayExps().clear();
        getNewArrayExps().addAll((Collection<? extends Exp>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.EXP__LEFT:
        setLeft(LEFT_EDEFAULT);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_PLUS:
        setRightPlus((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_MINUS:
        setRightMinus((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_MULTIPLY:
        setRightMultiply((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__RIGHT_DIVIDE:
        setRightDivide((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__IN_PARENTHESIS:
        setInParenthesis((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__LET_ID:
        setLetId(LET_ID_EDEFAULT);
        return;
      case ExTwentyOnePackage.EXP__LET_DEF_EXP:
        setLetDefExp((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__LET_TARGET_EXP:
        setLetTargetExp((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__IF_LOGIC_EXP:
        setIfLogicExp((LogicExp)null);
        return;
      case ExTwentyOnePackage.EXP__THEN_EXP:
        setThenExp((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__ELSE_EXP:
        setElseExp((Exp)null);
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_ID:
        setNewArrayId(NEW_ARRAY_ID_EDEFAULT);
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_IDS:
        getNewArrayIds().clear();
        return;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS:
        getNewArrayExps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.EXP__LEFT:
        return LEFT_EDEFAULT == null ? left != null : !LEFT_EDEFAULT.equals(left);
      case ExTwentyOnePackage.EXP__RIGHT_PLUS:
        return rightPlus != null;
      case ExTwentyOnePackage.EXP__RIGHT_MINUS:
        return rightMinus != null;
      case ExTwentyOnePackage.EXP__RIGHT_MULTIPLY:
        return rightMultiply != null;
      case ExTwentyOnePackage.EXP__RIGHT_DIVIDE:
        return rightDivide != null;
      case ExTwentyOnePackage.EXP__IN_PARENTHESIS:
        return inParenthesis != null;
      case ExTwentyOnePackage.EXP__LET_ID:
        return LET_ID_EDEFAULT == null ? letId != null : !LET_ID_EDEFAULT.equals(letId);
      case ExTwentyOnePackage.EXP__LET_DEF_EXP:
        return letDefExp != null;
      case ExTwentyOnePackage.EXP__LET_TARGET_EXP:
        return letTargetExp != null;
      case ExTwentyOnePackage.EXP__IF_LOGIC_EXP:
        return ifLogicExp != null;
      case ExTwentyOnePackage.EXP__THEN_EXP:
        return thenExp != null;
      case ExTwentyOnePackage.EXP__ELSE_EXP:
        return elseExp != null;
      case ExTwentyOnePackage.EXP__NEW_ARRAY_ID:
        return NEW_ARRAY_ID_EDEFAULT == null ? newArrayId != null : !NEW_ARRAY_ID_EDEFAULT.equals(newArrayId);
      case ExTwentyOnePackage.EXP__NEW_ARRAY_IDS:
        return newArrayIds != null && !newArrayIds.isEmpty();
      case ExTwentyOnePackage.EXP__NEW_ARRAY_EXPS:
        return newArrayExps != null && !newArrayExps.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (left: ");
    result.append(left);
    result.append(", letId: ");
    result.append(letId);
    result.append(", newArrayId: ");
    result.append(newArrayId);
    result.append(", newArrayIds: ");
    result.append(newArrayIds);
    result.append(')');
    return result.toString();
  }

} //ExpImpl
