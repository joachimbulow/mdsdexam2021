/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.exTwentyOne.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.exTwentyOne.ExTwentyOnePackage;
import org.xtext.example.mydsl.exTwentyOne.Exp;
import org.xtext.example.mydsl.exTwentyOne.LogicExp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logic Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.LogicExpImpl#getLeftLogic <em>Left Logic</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.exTwentyOne.impl.LogicExpImpl#getRightLogic <em>Right Logic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicExpImpl extends MinimalEObjectImpl.Container implements LogicExp
{
  /**
   * The cached value of the '{@link #getLeftLogic() <em>Left Logic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftLogic()
   * @generated
   * @ordered
   */
  protected Exp leftLogic;

  /**
   * The cached value of the '{@link #getRightLogic() <em>Right Logic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightLogic()
   * @generated
   * @ordered
   */
  protected Exp rightLogic;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExTwentyOnePackage.Literals.LOGIC_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getLeftLogic()
  {
    return leftLogic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftLogic(Exp newLeftLogic, NotificationChain msgs)
  {
    Exp oldLeftLogic = leftLogic;
    leftLogic = newLeftLogic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC, oldLeftLogic, newLeftLogic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftLogic(Exp newLeftLogic)
  {
    if (newLeftLogic != leftLogic)
    {
      NotificationChain msgs = null;
      if (leftLogic != null)
        msgs = ((InternalEObject)leftLogic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC, null, msgs);
      if (newLeftLogic != null)
        msgs = ((InternalEObject)newLeftLogic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC, null, msgs);
      msgs = basicSetLeftLogic(newLeftLogic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC, newLeftLogic, newLeftLogic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getRightLogic()
  {
    return rightLogic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightLogic(Exp newRightLogic, NotificationChain msgs)
  {
    Exp oldRightLogic = rightLogic;
    rightLogic = newRightLogic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC, oldRightLogic, newRightLogic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightLogic(Exp newRightLogic)
  {
    if (newRightLogic != rightLogic)
    {
      NotificationChain msgs = null;
      if (rightLogic != null)
        msgs = ((InternalEObject)rightLogic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC, null, msgs);
      if (newRightLogic != null)
        msgs = ((InternalEObject)newRightLogic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC, null, msgs);
      msgs = basicSetRightLogic(newRightLogic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC, newRightLogic, newRightLogic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC:
        return basicSetLeftLogic(null, msgs);
      case ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC:
        return basicSetRightLogic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC:
        return getLeftLogic();
      case ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC:
        return getRightLogic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC:
        setLeftLogic((Exp)newValue);
        return;
      case ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC:
        setRightLogic((Exp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC:
        setLeftLogic((Exp)null);
        return;
      case ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC:
        setRightLogic((Exp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExTwentyOnePackage.LOGIC_EXP__LEFT_LOGIC:
        return leftLogic != null;
      case ExTwentyOnePackage.LOGIC_EXP__RIGHT_LOGIC:
        return rightLogic != null;
    }
    return super.eIsSet(featureID);
  }

} //LogicExpImpl
