/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.exTwentyOne.DataDecl;
import org.xtext.example.mydsl.exTwentyOne.Divide;
import org.xtext.example.mydsl.exTwentyOne.Element;
import org.xtext.example.mydsl.exTwentyOne.ExTwentyOnePackage;
import org.xtext.example.mydsl.exTwentyOne.Expression;
import org.xtext.example.mydsl.exTwentyOne.Function;
import org.xtext.example.mydsl.exTwentyOne.Input;
import org.xtext.example.mydsl.exTwentyOne.Lambda;
import org.xtext.example.mydsl.exTwentyOne.LogicExp;
import org.xtext.example.mydsl.exTwentyOne.Minus;
import org.xtext.example.mydsl.exTwentyOne.Mult;
import org.xtext.example.mydsl.exTwentyOne.NewInput;
import org.xtext.example.mydsl.exTwentyOne.Node;
import org.xtext.example.mydsl.exTwentyOne.Plus;
import org.xtext.example.mydsl.exTwentyOne.Program;
import org.xtext.example.mydsl.exTwentyOne.Stream;
import org.xtext.example.mydsl.services.ExTwentyOneGrammarAccess;

@SuppressWarnings("all")
public class ExTwentyOneSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ExTwentyOneGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ExTwentyOnePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ExTwentyOnePackage.DATA_DECL:
				sequence_DataDecl(context, (DataDecl) semanticObject); 
				return; 
			case ExTwentyOnePackage.DIVIDE:
				sequence_Exp(context, (Divide) semanticObject); 
				return; 
			case ExTwentyOnePackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case ExTwentyOnePackage.EXPRESSION:
				if (rule == grammarAccess.getIfThenElseRule()) {
					sequence_IfThenElse(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpRule()
						|| action == grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_0()
						|| action == grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_0()
						|| action == grammarAccess.getExpAccess().getMultLeftAction_1_0_2_0()
						|| action == grammarAccess.getExpAccess().getDivideLeftAction_1_0_3_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_IfThenElse_LetBinding(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLetBindingRule()) {
					sequence_LetBinding(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case ExTwentyOnePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case ExTwentyOnePackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case ExTwentyOnePackage.LAMBDA:
				sequence_Lambda(context, (Lambda) semanticObject); 
				return; 
			case ExTwentyOnePackage.LOGIC_EXP:
				sequence_LogicExp(context, (LogicExp) semanticObject); 
				return; 
			case ExTwentyOnePackage.MINUS:
				sequence_Exp(context, (Minus) semanticObject); 
				return; 
			case ExTwentyOnePackage.MULT:
				sequence_Exp(context, (Mult) semanticObject); 
				return; 
			case ExTwentyOnePackage.NEW_INPUT:
				sequence_NewInput(context, (NewInput) semanticObject); 
				return; 
			case ExTwentyOnePackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case ExTwentyOnePackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.example.mydsl.exTwentyOne.Parameter) semanticObject); 
				return; 
			case ExTwentyOnePackage.PLUS:
				sequence_Exp(context, (Plus) semanticObject); 
				return; 
			case ExTwentyOnePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case ExTwentyOnePackage.STREAM:
				sequence_Stream(context, (Stream) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns DataDecl
	 *     DataDecl returns DataDecl
	 *
	 * Constraint:
	 *     (name=ID data+=ID data+=ID*)
	 * </pre>
	 */
	protected void sequence_DataDecl(ISerializationContext context, DataDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (element=ID | node=[NodeOrFunction|ID] | output=ID)
	 * </pre>
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Divide
	 *     Exp.Plus_1_0_0_0 returns Divide
	 *     Exp.Minus_1_0_1_0 returns Divide
	 *     Exp.Mult_1_0_2_0 returns Divide
	 *     Exp.Divide_1_0_3_0 returns Divide
	 *     Primary returns Divide
	 *
	 * Constraint:
	 *     (left=Exp_Divide_1_0_3_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Divide semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.DIVIDE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.DIVIDE__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.DIVIDE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.DIVIDE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getDivideLeftAction_1_0_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Minus
	 *     Exp.Plus_1_0_0_0 returns Minus
	 *     Exp.Minus_1_0_1_0 returns Minus
	 *     Exp.Mult_1_0_2_0 returns Minus
	 *     Exp.Divide_1_0_3_0 returns Minus
	 *     Primary returns Minus
	 *
	 * Constraint:
	 *     (left=Exp_Minus_1_0_1_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Mult
	 *     Exp.Plus_1_0_0_0 returns Mult
	 *     Exp.Minus_1_0_1_0 returns Mult
	 *     Exp.Mult_1_0_2_0 returns Mult
	 *     Exp.Divide_1_0_3_0 returns Mult
	 *     Primary returns Mult
	 *
	 * Constraint:
	 *     (left=Exp_Mult_1_0_2_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getMultLeftAction_1_0_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Plus
	 *     Exp.Plus_1_0_0_0 returns Plus
	 *     Exp.Minus_1_0_1_0 returns Plus
	 *     Exp.Mult_1_0_2_0 returns Plus
	 *     Exp.Divide_1_0_3_0 returns Plus
	 *     Primary returns Plus
	 *
	 * Constraint:
	 *     (left=Exp_Plus_1_0_0_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Function
	 *     Function returns Function
	 *     NodeOrFunction returns Function
	 *
	 * Constraint:
	 *     (name=ID lambda=Lambda)
	 * </pre>
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.FUNCTION__LAMBDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.FUNCTION__LAMBDA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionAccess().getLambdaLambdaParserRuleCall_3_0(), semanticObject.getLambda());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IfThenElse returns Expression
	 *
	 * Constraint:
	 *     (ifLogicExp=LogicExp thenExp=Exp elseExp=Exp)
	 * </pre>
	 */
	protected void sequence_IfThenElse(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__IF_LOGIC_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__IF_LOGIC_EXP));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__THEN_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__THEN_EXP));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__ELSE_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__ELSE_EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIfThenElseAccess().getIfLogicExpLogicExpParserRuleCall_1_0(), semanticObject.getIfLogicExp());
		feeder.accept(grammarAccess.getIfThenElseAccess().getThenExpExpParserRuleCall_3_0(), semanticObject.getThenExp());
		feeder.accept(grammarAccess.getIfThenElseAccess().getElseExpExpParserRuleCall_5_0(), semanticObject.getElseExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Expression
	 *     Exp.Plus_1_0_0_0 returns Expression
	 *     Exp.Minus_1_0_1_0 returns Expression
	 *     Exp.Mult_1_0_2_0 returns Expression
	 *     Exp.Divide_1_0_3_0 returns Expression
	 *     Primary returns Expression
	 *
	 * Constraint:
	 *     ((ifLogicExp=LogicExp thenExp=Exp elseExp=Exp) | (name=ID binding=Exp body=Exp))
	 * </pre>
	 */
	protected void sequence_IfThenElse_LetBinding(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Input
	 *     Input returns Input
	 *     InputOrNode returns Input
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.INPUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.INPUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Lambda
	 *     Element returns Lambda
	 *
	 * Constraint:
	 *     (name=ID lambdaExp=Exp)
	 * </pre>
	 */
	protected void sequence_Lambda(ISerializationContext context, Lambda semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.LAMBDA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.LAMBDA__NAME));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.LAMBDA__LAMBDA_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.LAMBDA__LAMBDA_EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLambdaAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLambdaAccess().getLambdaExpExpParserRuleCall_7_0(), semanticObject.getLambdaExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LetBinding returns Expression
	 *
	 * Constraint:
	 *     (name=ID binding=Exp body=Exp)
	 * </pre>
	 */
	protected void sequence_LetBinding(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__BINDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__BINDING));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.EXPRESSION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLetBindingAccess().getBindingExpParserRuleCall_3_0(), semanticObject.getBinding());
		feeder.accept(grammarAccess.getLetBindingAccess().getBodyExpParserRuleCall_5_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicExp returns LogicExp
	 *
	 * Constraint:
	 *     (leftLogic=Exp rightLogic=Exp)
	 * </pre>
	 */
	protected void sequence_LogicExp(ISerializationContext context, LogicExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.LOGIC_EXP__LEFT_LOGIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.LOGIC_EXP__LEFT_LOGIC));
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.LOGIC_EXP__RIGHT_LOGIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.LOGIC_EXP__RIGHT_LOGIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicExpAccess().getLeftLogicExpParserRuleCall_0_0(), semanticObject.getLeftLogic());
		feeder.accept(grammarAccess.getLogicExpAccess().getRightLogicExpParserRuleCall_2_0(), semanticObject.getRightLogic());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns NewInput
	 *     Exp.Plus_1_0_0_0 returns NewInput
	 *     Exp.Minus_1_0_1_0 returns NewInput
	 *     Exp.Mult_1_0_2_0 returns NewInput
	 *     Exp.Divide_1_0_3_0 returns NewInput
	 *     Primary returns NewInput
	 *     NewInput returns NewInput
	 *
	 * Constraint:
	 *     (newArrayId=ID newArrayIds+=ID newArrayExps+=Exp (newArrayIds+=ID newArrayExps+=Exp)*)
	 * </pre>
	 */
	protected void sequence_NewInput(ISerializationContext context, NewInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Node
	 *     Node returns Node
	 *     InputOrNode returns Node
	 *     NodeOrFunction returns Node
	 *
	 * Constraint:
	 *     (name=ID (function=[Function|ID] | lambda=Lambda))
	 * </pre>
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Parameter
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.example.mydsl.exTwentyOne.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExTwentyOnePackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExTwentyOnePackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=ID declarations+=Declaration*)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Stream
	 *     Stream returns Stream
	 *
	 * Constraint:
	 *     (inputsOrNodes+=[InputOrNode|ID] inputsOrNodes+=[InputOrNode|ID]* (elements+=Element elements+=Element*)+)
	 * </pre>
	 */
	protected void sequence_Stream(ISerializationContext context, Stream semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
