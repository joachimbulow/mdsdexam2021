/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExTwentyOneGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//Program: 'program' name=ID (declarations+=Declaration)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'program' name=ID (declarations+=Declaration)*
		public Group getGroup() { return cGroup; }
		
		//'program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(declarations+=Declaration)*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStreamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParameterParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Declaration:
		//    Function | Input | Node | Stream | DataDecl | Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | Input | Node | Stream | DataDecl | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Node
		public RuleCall getNodeParserRuleCall_2() { return cNodeParserRuleCall_2; }
		
		//Stream
		public RuleCall getStreamParserRuleCall_3() { return cStreamParserRuleCall_3; }
		
		//DataDecl
		public RuleCall getDataDeclParserRuleCall_4() { return cDataDeclParserRuleCall_4; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_5() { return cParameterParserRuleCall_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Parameter:
		//    'parameter' name=ID ':' Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' name=ID ':' Type
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLambdaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLambdaLambdaParserRuleCall_3_0 = (RuleCall)cLambdaAssignment_3.eContents().get(0);
		
		//Function:
		//    {Function} 'function' name=ID lambda=Lambda
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} 'function' name=ID lambda=Lambda
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//lambda=Lambda
		public Assignment getLambdaAssignment_3() { return cLambdaAssignment_3; }
		
		//Lambda
		public RuleCall getLambdaLambdaParserRuleCall_3_0() { return cLambdaLambdaParserRuleCall_3_0; }
	}
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Lambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambdaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLambdaExpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLambdaExpExpParserRuleCall_7_0 = (RuleCall)cLambdaExpAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Lambda:
		//    {Lambda} '(' name=ID ':' Type ')' '{' lambdaExp=Exp '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lambda} '(' name=ID ':' Type ')' '{' lambdaExp=Exp '}'
		public Group getGroup() { return cGroup; }
		
		//{Lambda}
		public Action getLambdaAction_0() { return cLambdaAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//lambdaExp=Exp
		public Assignment getLambdaExpAssignment_7() { return cLambdaExpAssignment_7; }
		
		//Exp
		public RuleCall getLambdaExpExpParserRuleCall_7_0() { return cLambdaExpExpParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Input:
		//    {Input} 'input' name=ID ':' Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} 'input' name=ID ':' Type
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_4_0_0 = (CrossReference)cFunctionAssignment_4_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_4_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_4_0_0.eContents().get(1);
		private final Assignment cLambdaAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cLambdaLambdaParserRuleCall_4_1_0 = (RuleCall)cLambdaAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Node:
		//    {Node} 'node' name=ID '[' (function = [Function] | lambda = Lambda) ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Node} 'node' name=ID '[' (function = [Function] | lambda = Lambda) ']'
		public Group getGroup() { return cGroup; }
		
		//{Node}
		public Action getNodeAction_0() { return cNodeAction_0; }
		
		//'node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//(function = [Function] | lambda = Lambda)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//function = [Function]
		public Assignment getFunctionAssignment_4_0() { return cFunctionAssignment_4_0; }
		
		//[Function]
		public CrossReference getFunctionFunctionCrossReference_4_0_0() { return cFunctionFunctionCrossReference_4_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_4_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_4_0_0_1; }
		
		//lambda = Lambda
		public Assignment getLambdaAssignment_4_1() { return cLambdaAssignment_4_1; }
		
		//Lambda
		public RuleCall getLambdaLambdaParserRuleCall_4_1_0() { return cLambdaLambdaParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class StreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Stream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStreamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStreamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputsOrNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputsOrNodesInputOrNodeCrossReference_2_0 = (CrossReference)cInputsOrNodesAssignment_2.eContents().get(0);
		private final RuleCall cInputsOrNodesInputOrNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cInputsOrNodesInputOrNodeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputsOrNodesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInputsOrNodesInputOrNodeCrossReference_3_1_0 = (CrossReference)cInputsOrNodesAssignment_3_1.eContents().get(0);
		private final RuleCall cInputsOrNodesInputOrNodeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cInputsOrNodesInputOrNodeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cElementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_4_2_1_0 = (RuleCall)cElementsAssignment_4_2_1.eContents().get(0);
		
		//Stream:
		//    {Stream} 'stream' inputsOrNodes+=[InputOrNode] (',' inputsOrNodes+=[InputOrNode])* ('to' elements+=Element (',' elements+=Element)* )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Stream} 'stream' inputsOrNodes+=[InputOrNode] (',' inputsOrNodes+=[InputOrNode])* ('to' elements+=Element (',' elements+=Element)* )+
		public Group getGroup() { return cGroup; }
		
		//{Stream}
		public Action getStreamAction_0() { return cStreamAction_0; }
		
		//'stream'
		public Keyword getStreamKeyword_1() { return cStreamKeyword_1; }
		
		//inputsOrNodes+=[InputOrNode]
		public Assignment getInputsOrNodesAssignment_2() { return cInputsOrNodesAssignment_2; }
		
		//[InputOrNode]
		public CrossReference getInputsOrNodesInputOrNodeCrossReference_2_0() { return cInputsOrNodesInputOrNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getInputsOrNodesInputOrNodeIDTerminalRuleCall_2_0_1() { return cInputsOrNodesInputOrNodeIDTerminalRuleCall_2_0_1; }
		
		//(',' inputsOrNodes+=[InputOrNode])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//inputsOrNodes+=[InputOrNode]
		public Assignment getInputsOrNodesAssignment_3_1() { return cInputsOrNodesAssignment_3_1; }
		
		//[InputOrNode]
		public CrossReference getInputsOrNodesInputOrNodeCrossReference_3_1_0() { return cInputsOrNodesInputOrNodeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getInputsOrNodesInputOrNodeIDTerminalRuleCall_3_1_0_1() { return cInputsOrNodesInputOrNodeIDTerminalRuleCall_3_1_0_1; }
		
		//('to' elements+=Element (',' elements+=Element)* )+
		public Group getGroup_4() { return cGroup_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_4_1_0() { return cElementsElementParserRuleCall_4_1_0; }
		
		//(',' elements+=Element)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_4_2_1() { return cElementsAssignment_4_2_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_4_2_1_0() { return cElementsElementParserRuleCall_4_2_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementIDTerminalRuleCall_0_1_0 = (RuleCall)cElementAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cNodeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final CrossReference cNodeNodeCrossReference_1_1_0_0 = (CrossReference)cNodeAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cNodeNodeCrossReference_1_1_0_0.eContents().get(1);
		private final RuleCall cLambdaParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cOutputKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutputAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutputIDTerminalRuleCall_2_1_0 = (RuleCall)cOutputAssignment_2_1.eContents().get(0);
		
		//Element:
		//    {Element} element=ID | '[' (node=[Node] | Lambda) ']' | 'output' output=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Element} element=ID | '[' (node=[Node] | Lambda) ']' | 'output' output=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Element} element=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Element}
		public Action getElementAction_0_0() { return cElementAction_0_0; }
		
		//element=ID
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_0_1_0() { return cElementIDTerminalRuleCall_0_1_0; }
		
		//'[' (node=[Node] | Lambda) ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(node=[Node] | Lambda)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//node=[Node]
		public Assignment getNodeAssignment_1_1_0() { return cNodeAssignment_1_1_0; }
		
		//[Node]
		public CrossReference getNodeNodeCrossReference_1_1_0_0() { return cNodeNodeCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_1_1_0_0_1() { return cNodeNodeIDTerminalRuleCall_1_1_0_0_1; }
		
		//Lambda
		public RuleCall getLambdaParserRuleCall_1_1_1() { return cLambdaParserRuleCall_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'output' output=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'output'
		public Keyword getOutputKeyword_2_0() { return cOutputKeyword_2_0; }
		
		//output=ID
		public Assignment getOutputAssignment_2_1() { return cOutputAssignment_2_1; }
		
		//ID
		public RuleCall getOutputIDTerminalRuleCall_2_1_0() { return cOutputIDTerminalRuleCall_2_1_0; }
	}
	public class DataDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.DataDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataIDTerminalRuleCall_4_0 = (RuleCall)cDataAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cTypeParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDataAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDataIDTerminalRuleCall_7_1_0 = (RuleCall)cDataAssignment_7_1.eContents().get(0);
		private final Keyword cColonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DataDecl:
		//    {DataDecl} 'data' name=ID '{' data+=ID ':' Type (',' data+=ID ':' Type)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataDecl} 'data' name=ID '{' data+=ID ':' Type (',' data+=ID ':' Type)* '}'
		public Group getGroup() { return cGroup; }
		
		//{DataDecl}
		public Action getDataDeclAction_0() { return cDataDeclAction_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//data+=ID
		public Assignment getDataAssignment_4() { return cDataAssignment_4; }
		
		//ID
		public RuleCall getDataIDTerminalRuleCall_4_0() { return cDataIDTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//Type
		public RuleCall getTypeParserRuleCall_6() { return cTypeParserRuleCall_6; }
		
		//(',' data+=ID ':' Type)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//data+=ID
		public Assignment getDataAssignment_7_1() { return cDataAssignment_7_1; }
		
		//ID
		public RuleCall getDataIDTerminalRuleCall_7_1_0() { return cDataIDTerminalRuleCall_7_1_0; }
		
		//':'
		public Keyword getColonKeyword_7_2() { return cColonKeyword_7_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_7_3() { return cTypeParserRuleCall_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//    'int' | 'string' | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'string' | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class InputOrNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.InputOrNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputOrNode:
		//    Input | Node
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Input | Node
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Input
		public RuleCall getInputParserRuleCall_0() { return cInputParserRuleCall_0; }
		
		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cMultLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cDivideLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		// Primary (({Plus.left=current} '+'| {Minus.left=current} '-'  | {Mult.left=current} '*'  | {Divide.left=current} '/' ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Plus.left=current} '+'| {Minus.left=current} '-'  | {Mult.left=current} '*'  | {Divide.left=current} '/' ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Plus.left=current} '+'| {Minus.left=current} '-'  | {Mult.left=current} '*'  | {Divide.left=current} '/' ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+'| {Minus.left=current} '-'  | {Mult.left=current} '*'  | {Divide.left=current} '/' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_2_0() { return cMultLeftAction_1_0_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_2_1() { return cAsteriskKeyword_1_0_2_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_3_0() { return cDivideLeftAction_1_0_3_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_3_1() { return cSolidusKeyword_1_0_3_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfThenElseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cNoneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cNewInputParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// WHat is this rule? ID ( '.' ID )*
		//Primary returns Expression:
		// Type | LetBinding | IfThenElse | 'none' | '(' Exp ')' | NewInput
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | LetBinding | IfThenElse | 'none' | '(' Exp ')' | NewInput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//LetBinding
		public RuleCall getLetBindingParserRuleCall_1() { return cLetBindingParserRuleCall_1; }
		
		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_2() { return cIfThenElseParserRuleCall_2; }
		
		//'none'
		public Keyword getNoneKeyword_3() { return cNoneKeyword_3; }
		
		//'(' Exp ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_4_1() { return cExpParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//NewInput
		public RuleCall getNewInputParserRuleCall_5() { return cNewInputParserRuleCall_5; }
	}
	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfLogicExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfLogicExpLogicExpParserRuleCall_1_0 = (RuleCall)cIfLogicExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpExpParserRuleCall_3_0 = (RuleCall)cThenExpAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpExpParserRuleCall_5_0 = (RuleCall)cElseExpAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfThenElse returns Expression:
		// 'if' ifLogicExp=LogicExp 'then' thenExp=Exp 'else' elseExp=Exp 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' ifLogicExp=LogicExp 'then' thenExp=Exp 'else' elseExp=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifLogicExp=LogicExp
		public Assignment getIfLogicExpAssignment_1() { return cIfLogicExpAssignment_1; }
		
		//LogicExp
		public RuleCall getIfLogicExpLogicExpParserRuleCall_1_0() { return cIfLogicExpLogicExpParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExp=Exp
		public Assignment getThenExpAssignment_3() { return cThenExpAssignment_3; }
		
		//Exp
		public RuleCall getThenExpExpParserRuleCall_3_0() { return cThenExpExpParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExp=Exp
		public Assignment getElseExpAssignment_5() { return cElseExpAssignment_5; }
		
		//Exp
		public RuleCall getElseExpExpParserRuleCall_5_0() { return cElseExpExpParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class NewInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.NewInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNewArrayIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNewArrayIdIDTerminalRuleCall_1_0 = (RuleCall)cNewArrayIdAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewArrayIdsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewArrayIdsIDTerminalRuleCall_3_0 = (RuleCall)cNewArrayIdsAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNewArrayExpsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNewArrayExpsExpParserRuleCall_5_0 = (RuleCall)cNewArrayExpsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNewArrayIdsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNewArrayIdsIDTerminalRuleCall_6_1_0 = (RuleCall)cNewArrayIdsAssignment_6_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNewArrayExpsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNewArrayExpsExpParserRuleCall_6_3_0 = (RuleCall)cNewArrayExpsAssignment_6_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NewInput:
		//    'new' newArrayId=ID '[' newArrayIds+=ID '=' newArrayExps+=Exp (',' newArrayIds+=ID '=' newArrayExps+=Exp)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' newArrayId=ID '[' newArrayIds+=ID '=' newArrayExps+=Exp (',' newArrayIds+=ID '=' newArrayExps+=Exp)* ']'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//newArrayId=ID
		public Assignment getNewArrayIdAssignment_1() { return cNewArrayIdAssignment_1; }
		
		//ID
		public RuleCall getNewArrayIdIDTerminalRuleCall_1_0() { return cNewArrayIdIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//newArrayIds+=ID
		public Assignment getNewArrayIdsAssignment_3() { return cNewArrayIdsAssignment_3; }
		
		//ID
		public RuleCall getNewArrayIdsIDTerminalRuleCall_3_0() { return cNewArrayIdsIDTerminalRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//newArrayExps+=Exp
		public Assignment getNewArrayExpsAssignment_5() { return cNewArrayExpsAssignment_5; }
		
		//Exp
		public RuleCall getNewArrayExpsExpParserRuleCall_5_0() { return cNewArrayExpsExpParserRuleCall_5_0; }
		
		//(',' newArrayIds+=ID '=' newArrayExps+=Exp)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//newArrayIds+=ID
		public Assignment getNewArrayIdsAssignment_6_1() { return cNewArrayIdsAssignment_6_1; }
		
		//ID
		public RuleCall getNewArrayIdsIDTerminalRuleCall_6_1_0() { return cNewArrayIdsIDTerminalRuleCall_6_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_2() { return cEqualsSignKeyword_6_2; }
		
		//newArrayExps+=Exp
		public Assignment getNewArrayExpsAssignment_6_3() { return cNewArrayExpsAssignment_6_3; }
		
		//Exp
		public RuleCall getNewArrayExpsExpParserRuleCall_6_3_0() { return cNewArrayExpsExpParserRuleCall_6_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class LetBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.LetBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBindingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBindingExpParserRuleCall_3_0 = (RuleCall)cBindingAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LetBinding returns Expression:
		//    'let' name=ID '=' binding=Exp 'in' body=Exp 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=ID '=' binding=Exp 'in' body=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//binding=Exp
		public Assignment getBindingAssignment_3() { return cBindingAssignment_3; }
		
		//Exp
		public RuleCall getBindingExpParserRuleCall_3_0() { return cBindingExpParserRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//body=Exp
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Exp
		public RuleCall getBodyExpParserRuleCall_5_0() { return cBodyExpParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ExTwentyOne.LogicExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftLogicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftLogicExpParserRuleCall_0_0 = (RuleCall)cLeftLogicAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Assignment cRightLogicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLogicExpParserRuleCall_2_0 = (RuleCall)cRightLogicAssignment_2.eContents().get(0);
		
		//LogicExp:
		//    leftLogic=Exp ('=' | '<' | '>' | '<=' | '>=') rightLogic=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//leftLogic=Exp ('=' | '<' | '>' | '<=' | '>=') rightLogic=Exp
		public Group getGroup() { return cGroup; }
		
		//leftLogic=Exp
		public Assignment getLeftLogicAssignment_0() { return cLeftLogicAssignment_0; }
		
		//Exp
		public RuleCall getLeftLogicExpParserRuleCall_0_0() { return cLeftLogicExpParserRuleCall_0_0; }
		
		//('=' | '<' | '>' | '<=' | '>=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3() { return cLessThanSignEqualsSignKeyword_1_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_4() { return cGreaterThanSignEqualsSignKeyword_1_4; }
		
		//rightLogic=Exp
		public Assignment getRightLogicAssignment_2() { return cRightLogicAssignment_2; }
		
		//Exp
		public RuleCall getRightLogicExpParserRuleCall_2_0() { return cRightLogicExpParserRuleCall_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final DeclarationElements pDeclaration;
	private final ParameterElements pParameter;
	private final FunctionElements pFunction;
	private final LambdaElements pLambda;
	private final InputElements pInput;
	private final NodeElements pNode;
	private final StreamElements pStream;
	private final ElementElements pElement;
	private final DataDeclElements pDataDecl;
	private final TypeElements pType;
	private final InputOrNodeElements pInputOrNode;
	private final ExpElements pExp;
	private final PrimaryElements pPrimary;
	private final IfThenElseElements pIfThenElse;
	private final NewInputElements pNewInput;
	private final LetBindingElements pLetBinding;
	private final LogicExpElements pLogicExp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExTwentyOneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.pParameter = new ParameterElements();
		this.pFunction = new FunctionElements();
		this.pLambda = new LambdaElements();
		this.pInput = new InputElements();
		this.pNode = new NodeElements();
		this.pStream = new StreamElements();
		this.pElement = new ElementElements();
		this.pDataDecl = new DataDeclElements();
		this.pType = new TypeElements();
		this.pInputOrNode = new InputOrNodeElements();
		this.pExp = new ExpElements();
		this.pPrimary = new PrimaryElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pNewInput = new NewInputElements();
		this.pLetBinding = new LetBindingElements();
		this.pLogicExp = new LogicExpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.ExTwentyOne".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program: 'program' name=ID (declarations+=Declaration)*
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Declaration:
	//    Function | Input | Node | Stream | DataDecl | Parameter
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Parameter:
	//    'parameter' name=ID ':' Type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Function:
	//    {Function} 'function' name=ID lambda=Lambda
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Lambda:
	//    {Lambda} '(' name=ID ':' Type ')' '{' lambdaExp=Exp '}'
	//;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//Input:
	//    {Input} 'input' name=ID ':' Type
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Node:
	//    {Node} 'node' name=ID '[' (function = [Function] | lambda = Lambda) ']'
	//;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Stream:
	//    {Stream} 'stream' inputsOrNodes+=[InputOrNode] (',' inputsOrNodes+=[InputOrNode])* ('to' elements+=Element (',' elements+=Element)* )+
	//;
	public StreamElements getStreamAccess() {
		return pStream;
	}
	
	public ParserRule getStreamRule() {
		return getStreamAccess().getRule();
	}
	
	//Element:
	//    {Element} element=ID | '[' (node=[Node] | Lambda) ']' | 'output' output=ID
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//DataDecl:
	//    {DataDecl} 'data' name=ID '{' data+=ID ':' Type (',' data+=ID ':' Type)* '}'
	//;
	public DataDeclElements getDataDeclAccess() {
		return pDataDecl;
	}
	
	public ParserRule getDataDeclRule() {
		return getDataDeclAccess().getRule();
	}
	
	//Type:
	//    'int' | 'string' | ID
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//InputOrNode:
	//    Input | Node
	//;
	public InputOrNodeElements getInputOrNodeAccess() {
		return pInputOrNode;
	}
	
	public ParserRule getInputOrNodeRule() {
		return getInputOrNodeAccess().getRule();
	}
	
	//Exp returns Expression:
	// Primary (({Plus.left=current} '+'| {Minus.left=current} '-'  | {Mult.left=current} '*'  | {Divide.left=current} '/' ) right=Primary)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//// WHat is this rule? ID ( '.' ID )*
	//Primary returns Expression:
	// Type | LetBinding | IfThenElse | 'none' | '(' Exp ')' | NewInput
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IfThenElse returns Expression:
	// 'if' ifLogicExp=LogicExp 'then' thenExp=Exp 'else' elseExp=Exp 'end'
	//;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}
	
	//NewInput:
	//    'new' newArrayId=ID '[' newArrayIds+=ID '=' newArrayExps+=Exp (',' newArrayIds+=ID '=' newArrayExps+=Exp)* ']'
	//;
	public NewInputElements getNewInputAccess() {
		return pNewInput;
	}
	
	public ParserRule getNewInputRule() {
		return getNewInputAccess().getRule();
	}
	
	//LetBinding returns Expression:
	//    'let' name=ID '=' binding=Exp 'in' body=Exp 'end'
	//;
	public LetBindingElements getLetBindingAccess() {
		return pLetBinding;
	}
	
	public ParserRule getLetBindingRule() {
		return getLetBindingAccess().getRule();
	}
	
	//LogicExp:
	//    leftLogic=Exp ('=' | '<' | '>' | '<=' | '>=') rightLogic=Exp
	//;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
