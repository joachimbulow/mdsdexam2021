/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalExTwentyOneParser;
import org.xtext.example.mydsl.services.ExTwentyOneGrammarAccess;

public class ExTwentyOneParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ExTwentyOneGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ExTwentyOneGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getNodeAccess().getAlternatives_4(), "rule__Node__Alternatives_4");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives_1_1(), "rule__Element__Alternatives_1_1");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getInputOrNodeAccess().getAlternatives(), "rule__InputOrNode__Alternatives");
			builder.put(grammarAccess.getNodeOrFunctionAccess().getAlternatives(), "rule__NodeOrFunction__Alternatives");
			builder.put(grammarAccess.getExpAccess().getAlternatives_1_0(), "rule__Exp__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getLogicExpAccess().getAlternatives_1(), "rule__LogicExp__Alternatives_1");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup(), "rule__Stream__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_3(), "rule__Stream__Group_3__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_4(), "rule__Stream__Group_4__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_4_2(), "rule__Stream__Group_4_2__0");
			builder.put(grammarAccess.getElementAccess().getGroup_0(), "rule__Element__Group_0__0");
			builder.put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup(), "rule__DataDecl__Group__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup_7(), "rule__DataDecl__Group_7__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_0(), "rule__Exp__Group_1_0_0__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_1(), "rule__Exp__Group_1_0_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_2(), "rule__Exp__Group_1_0_2__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_3(), "rule__Exp__Group_1_0_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_6(), "rule__Primary__Group_6__0");
			builder.put(grammarAccess.getDataAccessAccess().getGroup(), "rule__DataAccess__Group__0");
			builder.put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
			builder.put(grammarAccess.getNewInputAccess().getGroup(), "rule__NewInput__Group__0");
			builder.put(grammarAccess.getNewInputAccess().getGroup_6(), "rule__NewInput__Group_6__0");
			builder.put(grammarAccess.getLetBindingAccess().getGroup(), "rule__LetBinding__Group__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup(), "rule__LogicExp__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getDeclarationsAssignment_2(), "rule__Program__DeclarationsAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_2(), "rule__Function__NameAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getLambdaAssignment_3(), "rule__Function__LambdaAssignment_3");
			builder.put(grammarAccess.getLambdaAccess().getNameAssignment_2(), "rule__Lambda__NameAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getLambdaExpAssignment_7(), "rule__Lambda__LambdaExpAssignment_7");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_2(), "rule__Input__NameAssignment_2");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_2(), "rule__Node__NameAssignment_2");
			builder.put(grammarAccess.getNodeAccess().getFunctionAssignment_4_0(), "rule__Node__FunctionAssignment_4_0");
			builder.put(grammarAccess.getNodeAccess().getLambdaAssignment_4_1(), "rule__Node__LambdaAssignment_4_1");
			builder.put(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_2(), "rule__Stream__InputsOrNodesAssignment_2");
			builder.put(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_3_1(), "rule__Stream__InputsOrNodesAssignment_3_1");
			builder.put(grammarAccess.getStreamAccess().getElementsAssignment_4_1(), "rule__Stream__ElementsAssignment_4_1");
			builder.put(grammarAccess.getStreamAccess().getElementsAssignment_4_2_1(), "rule__Stream__ElementsAssignment_4_2_1");
			builder.put(grammarAccess.getElementAccess().getElementAssignment_0_1(), "rule__Element__ElementAssignment_0_1");
			builder.put(grammarAccess.getElementAccess().getNodeAssignment_1_1_0(), "rule__Element__NodeAssignment_1_1_0");
			builder.put(grammarAccess.getElementAccess().getOutputAssignment_2_1(), "rule__Element__OutputAssignment_2_1");
			builder.put(grammarAccess.getDataDeclAccess().getNameAssignment_2(), "rule__DataDecl__NameAssignment_2");
			builder.put(grammarAccess.getDataDeclAccess().getDataAssignment_4(), "rule__DataDecl__DataAssignment_4");
			builder.put(grammarAccess.getDataDeclAccess().getDataAssignment_7_1(), "rule__DataDecl__DataAssignment_7_1");
			builder.put(grammarAccess.getExpAccess().getRightAssignment_1_1(), "rule__Exp__RightAssignment_1_1");
			builder.put(grammarAccess.getDataAccessAccess().getAccessedDataAssignment_0(), "rule__DataAccess__AccessedDataAssignment_0");
			builder.put(grammarAccess.getDataAccessAccess().getAccessedFieldAssignment_2(), "rule__DataAccess__AccessedFieldAssignment_2");
			builder.put(grammarAccess.getIfThenElseAccess().getIfLogicExpAssignment_1(), "rule__IfThenElse__IfLogicExpAssignment_1");
			builder.put(grammarAccess.getIfThenElseAccess().getThenExpAssignment_3(), "rule__IfThenElse__ThenExpAssignment_3");
			builder.put(grammarAccess.getIfThenElseAccess().getElseExpAssignment_5(), "rule__IfThenElse__ElseExpAssignment_5");
			builder.put(grammarAccess.getNewInputAccess().getNewArrayIdAssignment_1(), "rule__NewInput__NewArrayIdAssignment_1");
			builder.put(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_3(), "rule__NewInput__NewArrayIdsAssignment_3");
			builder.put(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_5(), "rule__NewInput__NewArrayExpsAssignment_5");
			builder.put(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_6_1(), "rule__NewInput__NewArrayIdsAssignment_6_1");
			builder.put(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_6_3(), "rule__NewInput__NewArrayExpsAssignment_6_3");
			builder.put(grammarAccess.getLetBindingAccess().getNameAssignment_1(), "rule__LetBinding__NameAssignment_1");
			builder.put(grammarAccess.getLetBindingAccess().getBindingAssignment_3(), "rule__LetBinding__BindingAssignment_3");
			builder.put(grammarAccess.getLetBindingAccess().getBodyAssignment_5(), "rule__LetBinding__BodyAssignment_5");
			builder.put(grammarAccess.getLogicExpAccess().getLeftLogicAssignment_0(), "rule__LogicExp__LeftLogicAssignment_0");
			builder.put(grammarAccess.getLogicExpAccess().getRightLogicAssignment_2(), "rule__LogicExp__RightLogicAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ExTwentyOneGrammarAccess grammarAccess;

	@Override
	protected InternalExTwentyOneParser createParser() {
		InternalExTwentyOneParser result = new InternalExTwentyOneParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExTwentyOneGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExTwentyOneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
