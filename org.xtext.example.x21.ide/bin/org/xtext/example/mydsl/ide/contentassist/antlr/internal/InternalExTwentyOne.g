/*
 * generated by Xtext 2.26.0
 */
grammar InternalExTwentyOne;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.ExTwentyOneGrammarAccess;

}
@parser::members {
	private ExTwentyOneGrammarAccess grammarAccess;

	public void setGrammarAccess(ExTwentyOneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLambda
entryRuleLambda
:
{ before(grammarAccess.getLambdaRule()); }
	 ruleLambda
{ after(grammarAccess.getLambdaRule()); } 
	 EOF 
;

// Rule Lambda
ruleLambda 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLambdaAccess().getGroup()); }
		(rule__Lambda__Group__0)
		{ after(grammarAccess.getLambdaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStream
entryRuleStream
:
{ before(grammarAccess.getStreamRule()); }
	 ruleStream
{ after(grammarAccess.getStreamRule()); } 
	 EOF 
;

// Rule Stream
ruleStream 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStreamAccess().getGroup()); }
		(rule__Stream__Group__0)
		{ after(grammarAccess.getStreamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataDecl
entryRuleDataDecl
:
{ before(grammarAccess.getDataDeclRule()); }
	 ruleDataDecl
{ after(grammarAccess.getDataDeclRule()); } 
	 EOF 
;

// Rule DataDecl
ruleDataDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataDeclAccess().getGroup()); }
		(rule__DataDecl__Group__0)
		{ after(grammarAccess.getDataDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getGroup()); }
		(rule__Exp__Group__0)
		{ after(grammarAccess.getExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfThenElse
entryRuleIfThenElse
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
		(rule__IfThenElse__Group__0)
		{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewInput
entryRuleNewInput
:
{ before(grammarAccess.getNewInputRule()); }
	 ruleNewInput
{ after(grammarAccess.getNewInputRule()); } 
	 EOF 
;

// Rule NewInput
ruleNewInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewInputAccess().getGroup()); }
		(rule__NewInput__Group__0)
		{ after(grammarAccess.getNewInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetBinding
entryRuleLetBinding
:
{ before(grammarAccess.getLetBindingRule()); }
	 ruleLetBinding
{ after(grammarAccess.getLetBindingRule()); } 
	 EOF 
;

// Rule LetBinding
ruleLetBinding 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetBindingAccess().getGroup()); }
		(rule__LetBinding__Group__0)
		{ after(grammarAccess.getLetBindingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicExp
entryRuleLogicExp
:
{ before(grammarAccess.getLogicExpRule()); }
	 ruleLogicExp
{ after(grammarAccess.getLogicExpRule()); } 
	 EOF 
;

// Rule LogicExp
ruleLogicExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicExpAccess().getGroup()); }
		(rule__LogicExp__Group__0)
		{ after(grammarAccess.getLogicExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getDeclarationAccess().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getInputParserRuleCall_1()); }
		ruleInput
		{ after(grammarAccess.getDeclarationAccess().getInputParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getNodeParserRuleCall_2()); }
		ruleNode
		{ after(grammarAccess.getDeclarationAccess().getNodeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getStreamParserRuleCall_3()); }
		ruleStream
		{ after(grammarAccess.getDeclarationAccess().getStreamParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getDataDeclParserRuleCall_4()); }
		ruleDataDecl
		{ after(grammarAccess.getDeclarationAccess().getDataDeclParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getParameterParserRuleCall_5()); }
		ruleParameter
		{ after(grammarAccess.getDeclarationAccess().getParameterParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getFunctionAssignment_4_0()); }
		(rule__Node__FunctionAssignment_4_0)
		{ after(grammarAccess.getNodeAccess().getFunctionAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getLambdaAssignment_4_1()); }
		(rule__Node__LambdaAssignment_4_1)
		{ after(grammarAccess.getNodeAccess().getLambdaAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getGroup_0()); }
		(rule__Element__Group_0__0)
		{ after(grammarAccess.getElementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getGroup_1()); }
		(rule__Element__Group_1__0)
		{ after(grammarAccess.getElementAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getGroup_2()); }
		(rule__Element__Group_2__0)
		{ after(grammarAccess.getElementAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getNodeAssignment_1_1_0()); }
		(rule__Element__NodeAssignment_1_1_0)
		{ after(grammarAccess.getElementAccess().getNodeAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getLambdaParserRuleCall_1_1_1()); }
		ruleLambda
		{ after(grammarAccess.getElementAccess().getLambdaParserRuleCall_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getIntKeyword_0()); }
		'int'
		{ after(grammarAccess.getTypeAccess().getIntKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getStringKeyword_1()); }
		'string'
		{ after(grammarAccess.getTypeAccess().getStringKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIDTerminalRuleCall_2()); }
		RULE_ID
		{ after(grammarAccess.getTypeAccess().getIDTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_0()); }
		(rule__Exp__Group_1_0_0__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_1()); }
		(rule__Exp__Group_1_0_1__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_2()); }
		(rule__Exp__Group_1_0_2__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_3()); }
		(rule__Exp__Group_1_0_3__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getTypeParserRuleCall_0()); }
		ruleType
		{ after(grammarAccess.getPrimaryAccess().getTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getLetBindingParserRuleCall_1()); }
		ruleLetBinding
		{ after(grammarAccess.getPrimaryAccess().getLetBindingParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIfThenElseParserRuleCall_2()); }
		ruleIfThenElse
		{ after(grammarAccess.getPrimaryAccess().getIfThenElseParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNoneKeyword_3()); }
		'none'
		{ after(grammarAccess.getPrimaryAccess().getNoneKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_4()); }
		(rule__Primary__Group_4__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNewInputParserRuleCall_5()); }
		ruleNewInput
		{ after(grammarAccess.getPrimaryAccess().getNewInputParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpAccess().getEqualsSignKeyword_1_0()); }
		'='
		{ after(grammarAccess.getLogicExpAccess().getEqualsSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpAccess().getLessThanSignKeyword_1_1()); }
		'<'
		{ after(grammarAccess.getLogicExpAccess().getLessThanSignKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpAccess().getGreaterThanSignKeyword_1_2()); }
		'>'
		{ after(grammarAccess.getLogicExpAccess().getGreaterThanSignKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpAccess().getLessThanSignEqualsSignKeyword_1_3()); }
		'<='
		{ after(grammarAccess.getLogicExpAccess().getLessThanSignEqualsSignKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpAccess().getGreaterThanSignEqualsSignKeyword_1_4()); }
		'>='
		{ after(grammarAccess.getLogicExpAccess().getGreaterThanSignEqualsSignKeyword_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
	(rule__Program__NameAssignment_1)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getDeclarationsAssignment_2()); }
	(rule__Program__DeclarationsAssignment_2)*
	{ after(grammarAccess.getProgramAccess().getDeclarationsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
	'parameter'
	{ after(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
	(rule__Parameter__NameAssignment_1)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeParserRuleCall_3()); }
	ruleType
	{ after(grammarAccess.getParameterAccess().getTypeParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
	()
	{ after(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_1()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
	(rule__Function__NameAssignment_2)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLambdaAssignment_3()); }
	(rule__Function__LambdaAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getLambdaAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__0__Impl
	rule__Lambda__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getLambdaAction_0()); }
	()
	{ after(grammarAccess.getLambdaAccess().getLambdaAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__1__Impl
	rule__Lambda__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__2__Impl
	rule__Lambda__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getNameAssignment_2()); }
	(rule__Lambda__NameAssignment_2)
	{ after(grammarAccess.getLambdaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__3__Impl
	rule__Lambda__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getLambdaAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__4__Impl
	rule__Lambda__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getTypeParserRuleCall_4()); }
	ruleType
	{ after(grammarAccess.getLambdaAccess().getTypeParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__5__Impl
	rule__Lambda__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLambdaAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__6__Impl
	rule__Lambda__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getLambdaAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__7__Impl
	rule__Lambda__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getLambdaExpAssignment_7()); }
	(rule__Lambda__LambdaExpAssignment_7)
	{ after(grammarAccess.getLambdaAccess().getLambdaExpAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getLambdaAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputAction_0()); }
	()
	{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputKeyword_1()); }
	'input'
	{ after(grammarAccess.getInputAccess().getInputKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getNameAssignment_2()); }
	(rule__Input__NameAssignment_2)
	{ after(grammarAccess.getInputAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getInputAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getTypeParserRuleCall_4()); }
	ruleType
	{ after(grammarAccess.getInputAccess().getTypeParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNodeAction_0()); }
	()
	{ after(grammarAccess.getNodeAccess().getNodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNodeKeyword_1()); }
	'node'
	{ after(grammarAccess.getNodeAccess().getNodeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__2__Impl
	rule__Node__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNameAssignment_2()); }
	(rule__Node__NameAssignment_2)
	{ after(grammarAccess.getNodeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__3__Impl
	rule__Node__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getLeftSquareBracketKeyword_3()); }
	'['
	{ after(grammarAccess.getNodeAccess().getLeftSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__4__Impl
	rule__Node__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getAlternatives_4()); }
	(rule__Node__Alternatives_4)
	{ after(grammarAccess.getNodeAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getNodeAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group__0__Impl
	rule__Stream__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getStreamAction_0()); }
	()
	{ after(grammarAccess.getStreamAccess().getStreamAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group__1__Impl
	rule__Stream__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getStreamKeyword_1()); }
	'stream'
	{ after(grammarAccess.getStreamAccess().getStreamKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group__2__Impl
	rule__Stream__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_2()); }
	(rule__Stream__InputsOrNodesAssignment_2)
	{ after(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group__3__Impl
	rule__Stream__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getGroup_3()); }
	(rule__Stream__Group_3__0)*
	{ after(grammarAccess.getStreamAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStreamAccess().getGroup_4()); }
		(rule__Stream__Group_4__0)
		{ after(grammarAccess.getStreamAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getStreamAccess().getGroup_4()); }
		(rule__Stream__Group_4__0)*
		{ after(grammarAccess.getStreamAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_3__0__Impl
	rule__Stream__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getStreamAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_3_1()); }
	(rule__Stream__InputsOrNodesAssignment_3_1)
	{ after(grammarAccess.getStreamAccess().getInputsOrNodesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_4__0__Impl
	rule__Stream__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getToKeyword_4_0()); }
	'to'
	{ after(grammarAccess.getStreamAccess().getToKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_4__1__Impl
	rule__Stream__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getElementsAssignment_4_1()); }
	(rule__Stream__ElementsAssignment_4_1)
	{ after(grammarAccess.getStreamAccess().getElementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getGroup_4_2()); }
	(rule__Stream__Group_4_2__0)*
	{ after(grammarAccess.getStreamAccess().getGroup_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_4_2__0__Impl
	rule__Stream__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getCommaKeyword_4_2_0()); }
	','
	{ after(grammarAccess.getStreamAccess().getCommaKeyword_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stream__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStreamAccess().getElementsAssignment_4_2_1()); }
	(rule__Stream__ElementsAssignment_4_2_1)
	{ after(grammarAccess.getStreamAccess().getElementsAssignment_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_0__0__Impl
	rule__Element__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getElementAction_0_0()); }
	()
	{ after(grammarAccess.getElementAccess().getElementAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getElementAssignment_0_1()); }
	(rule__Element__ElementAssignment_0_1)
	{ after(grammarAccess.getElementAccess().getElementAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__0__Impl
	rule__Element__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getElementAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__1__Impl
	rule__Element__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getAlternatives_1_1()); }
	(rule__Element__Alternatives_1_1)
	{ after(grammarAccess.getElementAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getElementAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_2__0__Impl
	rule__Element__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getOutputKeyword_2_0()); }
	'output'
	{ after(grammarAccess.getElementAccess().getOutputKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getOutputAssignment_2_1()); }
	(rule__Element__OutputAssignment_2_1)
	{ after(grammarAccess.getElementAccess().getOutputAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__0__Impl
	rule__DataDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getDataDeclAction_0()); }
	()
	{ after(grammarAccess.getDataDeclAccess().getDataDeclAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__1__Impl
	rule__DataDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getDataKeyword_1()); }
	'data'
	{ after(grammarAccess.getDataDeclAccess().getDataKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__2__Impl
	rule__DataDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getNameAssignment_2()); }
	(rule__DataDecl__NameAssignment_2)
	{ after(grammarAccess.getDataDeclAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__3__Impl
	rule__DataDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getDataDeclAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__4__Impl
	rule__DataDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getDataAssignment_4()); }
	(rule__DataDecl__DataAssignment_4)
	{ after(grammarAccess.getDataDeclAccess().getDataAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__5__Impl
	rule__DataDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getDataDeclAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__6__Impl
	rule__DataDecl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getTypeParserRuleCall_6()); }
	ruleType
	{ after(grammarAccess.getDataDeclAccess().getTypeParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__7__Impl
	rule__DataDecl__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getGroup_7()); }
	(rule__DataDecl__Group_7__0)*
	{ after(grammarAccess.getDataDeclAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getDataDeclAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataDecl__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group_7__0__Impl
	rule__DataDecl__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getDataDeclAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group_7__1__Impl
	rule__DataDecl__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getDataAssignment_7_1()); }
	(rule__DataDecl__DataAssignment_7_1)
	{ after(grammarAccess.getDataDeclAccess().getDataAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group_7__2__Impl
	rule__DataDecl__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getColonKeyword_7_2()); }
	':'
	{ after(grammarAccess.getDataDeclAccess().getColonKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataDecl__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataDeclAccess().getTypeParserRuleCall_7_3()); }
	ruleType
	{ after(grammarAccess.getDataDeclAccess().getTypeParserRuleCall_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__0__Impl
	rule__Exp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getExpAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getGroup_1()); }
	(rule__Exp__Group_1__0)*
	{ after(grammarAccess.getExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__0__Impl
	rule__Exp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getAlternatives_1_0()); }
	(rule__Exp__Alternatives_1_0)
	{ after(grammarAccess.getExpAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getRightAssignment_1_1()); }
	(rule__Exp__RightAssignment_1_1)
	{ after(grammarAccess.getExpAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_0__0__Impl
	rule__Exp__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getExpAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_1__0__Impl
	rule__Exp__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getExpAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_2__0__Impl
	rule__Exp__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getMultLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getExpAccess().getMultLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getAsteriskKeyword_1_0_2_1()); }
	'*'
	{ after(grammarAccess.getExpAccess().getAsteriskKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_3__0__Impl
	rule__Exp__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getDivideLeftAction_1_0_3_0()); }
	()
	{ after(grammarAccess.getExpAccess().getDivideLeftAction_1_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getSolidusKeyword_1_0_3_1()); }
	'/'
	{ after(grammarAccess.getExpAccess().getSolidusKeyword_1_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_4__0__Impl
	rule__Primary__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_4__1__Impl
	rule__Primary__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpParserRuleCall_4_1()); }
	ruleExp
	{ after(grammarAccess.getPrimaryAccess().getExpParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getIfLogicExpAssignment_1()); }
	(rule__IfThenElse__IfLogicExpAssignment_1)
	{ after(grammarAccess.getIfThenElseAccess().getIfLogicExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getThenExpAssignment_3()); }
	(rule__IfThenElse__ThenExpAssignment_3)
	{ after(grammarAccess.getIfThenElseAccess().getThenExpAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }
	'else'
	{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__5__Impl
	rule__IfThenElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseExpAssignment_5()); }
	(rule__IfThenElse__ElseExpAssignment_5)
	{ after(grammarAccess.getIfThenElseAccess().getElseExpAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getIfThenElseAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__0__Impl
	rule__NewInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewKeyword_0()); }
	'new'
	{ after(grammarAccess.getNewInputAccess().getNewKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__1__Impl
	rule__NewInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewArrayIdAssignment_1()); }
	(rule__NewInput__NewArrayIdAssignment_1)
	{ after(grammarAccess.getNewInputAccess().getNewArrayIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__2__Impl
	rule__NewInput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getNewInputAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__3__Impl
	rule__NewInput__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_3()); }
	(rule__NewInput__NewArrayIdsAssignment_3)
	{ after(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__4__Impl
	rule__NewInput__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getNewInputAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__5__Impl
	rule__NewInput__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_5()); }
	(rule__NewInput__NewArrayExpsAssignment_5)
	{ after(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__6__Impl
	rule__NewInput__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getGroup_6()); }
	(rule__NewInput__Group_6__0)*
	{ after(grammarAccess.getNewInputAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getRightSquareBracketKeyword_7()); }
	']'
	{ after(grammarAccess.getNewInputAccess().getRightSquareBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewInput__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group_6__0__Impl
	rule__NewInput__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getNewInputAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group_6__1__Impl
	rule__NewInput__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_6_1()); }
	(rule__NewInput__NewArrayIdsAssignment_6_1)
	{ after(grammarAccess.getNewInputAccess().getNewArrayIdsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group_6__2__Impl
	rule__NewInput__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getEqualsSignKeyword_6_2()); }
	'='
	{ after(grammarAccess.getNewInputAccess().getEqualsSignKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewInput__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_6_3()); }
	(rule__NewInput__NewArrayExpsAssignment_6_3)
	{ after(grammarAccess.getNewInputAccess().getNewArrayExpsAssignment_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LetBinding__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__0__Impl
	rule__LetBinding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getLetBindingAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__1__Impl
	rule__LetBinding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getNameAssignment_1()); }
	(rule__LetBinding__NameAssignment_1)
	{ after(grammarAccess.getLetBindingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__2__Impl
	rule__LetBinding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getLetBindingAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__3__Impl
	rule__LetBinding__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getBindingAssignment_3()); }
	(rule__LetBinding__BindingAssignment_3)
	{ after(grammarAccess.getLetBindingAccess().getBindingAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__4__Impl
	rule__LetBinding__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getLetBindingAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__5__Impl
	rule__LetBinding__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getBodyAssignment_5()); }
	(rule__LetBinding__BodyAssignment_5)
	{ after(grammarAccess.getLetBindingAccess().getBodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getLetBindingAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExp__Group__0__Impl
	rule__LogicExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpAccess().getLeftLogicAssignment_0()); }
	(rule__LogicExp__LeftLogicAssignment_0)
	{ after(grammarAccess.getLogicExpAccess().getLeftLogicAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExp__Group__1__Impl
	rule__LogicExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpAccess().getAlternatives_1()); }
	(rule__LogicExp__Alternatives_1)
	{ after(grammarAccess.getLogicExpAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpAccess().getRightLogicAssignment_2()); }
	(rule__LogicExp__RightLogicAssignment_2)
	{ after(grammarAccess.getLogicExpAccess().getRightLogicAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__DeclarationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_2_0()); }
		ruleDeclaration
		{ after(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__LambdaAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getLambdaLambdaParserRuleCall_3_0()); }
		ruleLambda
		{ after(grammarAccess.getFunctionAccess().getLambdaLambdaParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLambdaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__LambdaExpAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getLambdaExpExpParserRuleCall_7_0()); }
		ruleExp
		{ after(grammarAccess.getLambdaAccess().getLambdaExpExpParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__FunctionAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getFunctionFunctionCrossReference_4_0_0()); }
		(
			{ before(grammarAccess.getNodeAccess().getFunctionFunctionIDTerminalRuleCall_4_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAccess().getFunctionFunctionIDTerminalRuleCall_4_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAccess().getFunctionFunctionCrossReference_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__LambdaAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getLambdaLambdaParserRuleCall_4_1_0()); }
		ruleLambda
		{ after(grammarAccess.getNodeAccess().getLambdaLambdaParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__InputsOrNodesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__InputsOrNodesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getStreamAccess().getInputsOrNodesInputOrNodeCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__ElementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStreamAccess().getElementsElementParserRuleCall_4_1_0()); }
		ruleElement
		{ after(grammarAccess.getStreamAccess().getElementsElementParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__ElementsAssignment_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStreamAccess().getElementsElementParserRuleCall_4_2_1_0()); }
		ruleElement
		{ after(grammarAccess.getStreamAccess().getElementsElementParserRuleCall_4_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__ElementAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getElementIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getElementAccess().getElementIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NodeAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getNodeNodeCrossReference_1_1_0_0()); }
		(
			{ before(grammarAccess.getElementAccess().getNodeNodeIDTerminalRuleCall_1_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getElementAccess().getNodeNodeIDTerminalRuleCall_1_1_0_0_1()); }
		)
		{ after(grammarAccess.getElementAccess().getNodeNodeCrossReference_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__OutputAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getOutputIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getElementAccess().getOutputIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataDeclAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDataDeclAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__DataAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataDeclAccess().getDataIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getDataDeclAccess().getDataIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDecl__DataAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataDeclAccess().getDataIDTerminalRuleCall_7_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataDeclAccess().getDataIDTerminalRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0()); }
		rulePrimary
		{ after(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__IfLogicExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getIfLogicExpLogicExpParserRuleCall_1_0()); }
		ruleLogicExp
		{ after(grammarAccess.getIfThenElseAccess().getIfLogicExpLogicExpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenExpAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getThenExpExpParserRuleCall_3_0()); }
		ruleExp
		{ after(grammarAccess.getIfThenElseAccess().getThenExpExpParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseExpAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getElseExpExpParserRuleCall_5_0()); }
		ruleExp
		{ after(grammarAccess.getIfThenElseAccess().getElseExpExpParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__NewArrayIdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewInputAccess().getNewArrayIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNewInputAccess().getNewArrayIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__NewArrayIdsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewInputAccess().getNewArrayIdsIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getNewInputAccess().getNewArrayIdsIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__NewArrayExpsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewInputAccess().getNewArrayExpsExpParserRuleCall_5_0()); }
		ruleExp
		{ after(grammarAccess.getNewInputAccess().getNewArrayExpsExpParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__NewArrayIdsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewInputAccess().getNewArrayIdsIDTerminalRuleCall_6_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNewInputAccess().getNewArrayIdsIDTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewInput__NewArrayExpsAssignment_6_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewInputAccess().getNewArrayExpsExpParserRuleCall_6_3_0()); }
		ruleExp
		{ after(grammarAccess.getNewInputAccess().getNewArrayExpsExpParserRuleCall_6_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__BindingAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getBindingExpParserRuleCall_3_0()); }
		ruleExp
		{ after(grammarAccess.getLetBindingAccess().getBindingExpParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__BodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getBodyExpParserRuleCall_5_0()); }
		ruleExp
		{ after(grammarAccess.getLetBindingAccess().getBodyExpParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__LeftLogicAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpAccess().getLeftLogicExpParserRuleCall_0_0()); }
		ruleExp
		{ after(grammarAccess.getLogicExpAccess().getLeftLogicExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__RightLogicAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpAccess().getRightLogicExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getLogicExpAccess().getRightLogicExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
