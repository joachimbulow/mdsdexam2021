/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.exTwentyOne.Program
import org.xtext.example.mydsl.exTwentyOne.Declaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExTwentyOneGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.filter(Program).next
		fsa.generateFile(
            "x21/" + program.name + ".java",
            program.compile);
		
	}
	
	def static compile(Program program) {
		'''
			package «program.name»;
			...
			public class «program.name.toUpper»Main extends GenericMainX21 {
			// Code for function add1
			«FOR declaration : program.declarations»
				«declaration.compile»
			«ENDFOR»
			private Object fun_add1(Object arg) {
			return funimpl_add1((Integer)arg);
			}
			private Object funimpl_add1(Integer _x){ return ((_x)+(1)); }
			// Code for input number
			private ComputeNode<Object,Object> node_number = new InputNode<Object>();
			public void inputNumber(Integer input) {
			node_number.put(input);
			}
			// Code for node add1node
			private ComputeNode <Object,Object> node_add1node = new AbstractComputeNode<Object,Object>() {
			protected Object function(Object input) {
			return fun_add1(input);
			}
			};
			...
			// Output nodes
			private OutputNode<Object> node_inc_number_1 = new OutputNode<Object>();
			public List<Object> getInc_number_1() { return node_inc_number_1.getData(); }
			...
			// Initialization of specific nodes
			protected void initializeNodes() {
			super.addNode(node_number);
			super.addNode(node_add1node);
			...
			}
			// Initialize network as a whole
			protected void initializeNetwork() {
			node_number.addOutputNode(node_add1node);
			node_add1node.addOutputNode(node_inc_number_1);
			...
			}
		'''
	}
	
	def static compile(Declaration declaration) {
		var gg = 12;
		var hey = 12;
	}
	
	 def static toUpper(String it) {
        toUpperCase
    }
}
